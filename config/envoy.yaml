admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
    # INGRESS LISTENER
    - name: ingress_listener
      address:
        socket_address: { address: 0.0.0.0, port_value: 8080 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress
                http_filters:
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        mcp_provider:
                          issuer: ai-gateway
                          audiences:
                            - mcp-service
                          remote_jwks:
                            http_uri:
                              uri: http://auth-service:8080/.well-known/jwks.json
                              cluster: auth_service
                            cache_duration: 300s
                  - name: envoy.filters.http.ratelimit
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                      domain: ai-gateway
                      failure_mode_deny: true
                  - name: envoy.filters.http.router
                route_config:
                  name: ingress_route
                  virtual_hosts:
                    - name: mcp_services
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/mcp/" }
                          route: { cluster: internal_mcp_services }
                        - match: { prefix: "/" }
                          direct_response: { status: 404, body: { inline_string: "Not found" } }

    # EGRESS LISTENER
    - name: egress_listener
      address:
        socket_address: { address: 0.0.0.0, port_value: 8443 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: egress
                http_filters:
                  - name: envoy.filters.http.ext_authz
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                      grpc_service:
                        envoy_grpc:
                          cluster_name: auth_service
                  - name: envoy.filters.http.router
                route_config:
                  name: egress_route
                  virtual_hosts:
                    - name: external_services
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/deepseek/" }
                          route: 
                            cluster: deepseek_llm
                            timeout: 60s
                            retry_policy:
                              retry_on: 5xx
                              num_retries: 2
                        - match: { prefix: "/external-mcp/" }
                          route: { cluster: external_mcps }

  clusters:
    # INTERNAL SERVICES
    - name: internal_mcp_services
      connect_timeout: 1s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: internal_mcp_services
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: mcp-core, port_value: 8000 }
    
    # EXTERNAL SERVICES
    - name: deepseek_llm
      connect_timeout: 30s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: deepseek_llm
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: api.deepseek.com, port_value: 443 }
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: api.deepseek.com

    - name: external_mcps
      connect_timeout: 10s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: external_mcps
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: partner-mcp.example.com, port_value: 443 }
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext

    # SUPPORT SERVICES
    - name: auth_service
      connect_timeout: 1s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: auth_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: auth-service, port_value: 8080 }

    - name: rate_limit_service
      connect_timeout: 1s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: rate_limit_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: redis, port_value: 6379 }

rate_limit_service:
  grpc_service:
    envoy_grpc:
      cluster_name: rate_limit_service
    timeout: 1s